class BlurbDecorator < Draper::Base
  decorates :blurb

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end

  def h
    helpers || (@blurb_view_helper ||= BlurbViewHelper.new)
  end

  def name
    "#{model.name} @ #{model.year}"
  end

  def price
    "#{model.price_currency}#{h.price_to_human(model.price_value)}"
  end

  def fuel_type
    model.fuel_type.to_s.mb_chars.downcase
  end

  def engine
    "#{fuel_type} (#{h.value_to_human(model.engine_value)}/#{model.cylinders_count}Cyl)"
  end

  def body
    "#{model.body_type} / #{model.color}".mb_chars.downcase
  end

  def transmission
    "#{model.transmission} / #{model.drive_type}".mb_chars.downcase
  end

  def avatar_path
    if model.photos.present? && model.reprocessed_v1?
      blurb.has_avatar? ? blurb.photos.first.image(:small) : blurb.photos.first.image(:medium)
    else
      'http://placehold.it/100&text=:)'.html_safe
    end
  end

  def original_post_url
    "http://av.by/public/public.php?event=View&public_id=#{model.vendor_id}"
  end

  def short_url
    h.short_blurb_url(model.short_id, host: ActionMailer::Base.default_url_options[:host])
  end

  def equipment
    h.equipment_options_shortener(model.equipment).join(', ')
  end

  def mileage
    if [model.mileage_value, model.mileage_units].all?(&:present?)
      "#{h.number_with_delimiter model.mileage_value} #{model.mileage_units}"
    end
  end

  def created_at
    model.created_at.strftime("%d/%m/%Y")
  end

  def location
    [model.city, model.country].delete_if(&:blank?).join(', ')
  end

  class BlurbViewHelper
    include ActionView::Helpers::NumberHelper
    include Rails.application.routes.url_helpers
    include ApplicationHelper

    def initialize
      default_url_options[:host] = ActionMailer::Base.default_url_options[:host]
    end
  end
end
